import { AssociationCounts } from "src/data/helpers/AssociationCounts";
import { BigBag } from "src/data/helpers/BigBag";
import { CounterBag } from "src/data/helpers/CounterBag";
import { DispatchRecord } from "src/data/models/DispatchRecord";
import { VehicleArrival } from "src/data/models/VehicleArrival";
import { VehicleDeparture } from "src/data/models/VehicleDeparture";
import { FileArchiverService } from "src/my-utils/zipper";
import { MessagingService } from "../fcm/fcm.service";
import { AssociationBag } from "src/data/helpers/AssociationBag";
import { DispatchRecordList } from "src/data/helpers/DispatchRecordList";
import { AmbassadorPassengerCount } from "src/data/models/AmbassadorPassengerCount";
import { CommuterRequest } from "src/data/models/CommuterRequest";
import { VehicleHeartbeat } from "src/data/models/VehicleHeartbeat";
import mongoose, { UpdateResult } from "mongoose";
import { Trip } from "src/data/models/Trip";
export declare class DispatchService {
    private messagingService;
    private zipService;
    private vehicleHeartbeatModel;
    private vehicleArrivalModel;
    private vehicleDepartureModel;
    private dispatchRecordModel;
    private ambassadorPassengerCountModel;
    private commuterRequestModel;
    private tripModel;
    constructor(messagingService: MessagingService, zipService: FileArchiverService, vehicleHeartbeatModel: mongoose.Model<VehicleHeartbeat>, vehicleArrivalModel: mongoose.Model<VehicleArrival>, vehicleDepartureModel: mongoose.Model<VehicleDeparture>, dispatchRecordModel: mongoose.Model<DispatchRecord>, ambassadorPassengerCountModel: mongoose.Model<AmbassadorPassengerCount>, commuterRequestModel: mongoose.Model<CommuterRequest>, tripModel: mongoose.Model<Trip>);
    getRouteDispatchRecords(routeId: string, startDate: string): Promise<DispatchRecord[]>;
    addTrip(trip: Trip): Promise<Trip>;
    updateTrip(trip: Trip): Promise<UpdateResult>;
    getAmbassadorPassengerCounts(userId: string, startDate: string, endDate: string): Promise<AmbassadorPassengerCount[]>;
    countVehicleDeparturesByDate(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    countVehicleHeartbeatsByDate(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    countVehiclePassengerCounts(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    generateAmbassadorPassengerCount(): Promise<AmbassadorPassengerCount>;
    generateHeartbeatBetweenLandmarks(): Promise<void>;
    countMarshalDispatchRecords(): Promise<number>;
    findVehicleArrivalsByLocation(): Promise<VehicleArrival[]>;
    findVehicleDeparturesByLocation(): Promise<VehicleDeparture[]>;
    getLandmarkVehicleDepartures(): Promise<VehicleDeparture[]>;
    getAssociationBagZippedFile(associationId: string, startDate: string, endDate: string): Promise<any>;
    generateRouteDispatchRecords(): Promise<void>;
    addDispatchRecord(dispatchRecord: DispatchRecord): Promise<DispatchRecord>;
    getVehicleArrivalsByDate(vehicleId: string, startDate: string, endDate: string): Promise<VehicleArrival[]>;
    getVehicleArrivals(vehicleId: string, startDate: string, endDate: string): Promise<VehicleArrival[]>;
    getVehicleHeartbeats(vehicleId: string, startDate: string, endDate: string): Promise<VehicleHeartbeat[]>;
    getVehicleDispatchRecords(vehicleId: string, startDate: string, endDate: string): Promise<DispatchRecord[]>;
    getVehiclePassengerCounts(vehicleId: string, startDate: string, endDate: string): Promise<AmbassadorPassengerCount[]>;
    getVehicleDepartures(vehicleId: string, startDate: string, endDate: string): Promise<VehicleDeparture[]>;
    getVehicleDeparturesByDate(vehicleId: string, startDate: string, endDate: string): Promise<VehicleDeparture[]>;
    countDispatchesByDate(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    countVehicleArrivalsByDate(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    countPassengerCountsByDate(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    countVehicleDepartures(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    countVehicleDispatches(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    countVehicleArrivals(vehicleId: string, startDate: string, endDate: string): Promise<number>;
    getOwnerDispatchRecords(ownerId: string, startDate: string, endDate: string): Promise<DispatchRecord[]>;
    getOwnerVehicleArrivals(ownerId: string, startDate: string, endDate: string): Promise<VehicleArrival[]>;
    getOwnerVehicleDepartures(ownerId: string, startDate: string, endDate: string): Promise<VehicleDeparture[]>;
    getOwnerVehicleHeartbeats(ownerId: string, startDate: string, endDate: string): Promise<VehicleHeartbeat[]>;
    getOwnerPassengerCounts(ownerId: string, startDate: string, endDate: string): Promise<AmbassadorPassengerCount[]>;
    getAssociationBag(associationId: string, startDate: string, endDate: string): Promise<AssociationBag>;
    handleArrivalAndDispatch(): Promise<void>;
    handleDateAndSleep(): Promise<number>;
    generateDeparture(): Promise<void>;
    writeHeartbeatBetween(): Promise<void>;
    addVehicleDeparture(vehicleDeparture: VehicleDeparture): Promise<VehicleDeparture>;
    handleArrival(): Promise<void>;
    addVehicleHeartbeat(heartbeat: VehicleHeartbeat): Promise<any>;
    addVehicleArrival(vehicleArrival: VehicleArrival): Promise<VehicleArrival>;
    getRouteVehicleArrivals(): Promise<VehicleArrival[]>;
    addDispatchRecords(dispatchRecordList: DispatchRecordList): Promise<DispatchRecord[]>;
    getLandmarkDispatchRecords(): Promise<DispatchRecord[]>;
    getMarshalDispatchRecords(marshalId: string, startDate: string): Promise<DispatchRecord[]>;
    getLandmarkVehicleArrivals(): Promise<VehicleArrival[]>;
    getVehicleCountsByDate(vehicleId: string, startDate: string, endDate: string): Promise<CounterBag[]>;
    getVehicleCounts(vehicleId: string): Promise<CounterBag[]>;
    getOwnersBag(userId: string, startDate: string, endDate: string): Promise<BigBag>;
    getAssociationCounts(associationId: string, startDate: string, endDate: string): Promise<AssociationCounts>;
    fixOwnerToPassengerCounts(): Promise<string>;
}
