import { ConfigService } from "@nestjs/config";
import mongoose, { UpdateResult } from "mongoose";
import { Commuter } from "src/data/models/Commuter";
import { CommuterResponse } from "src/data/models/CommuterResponse";
import { CommuterRequest } from "src/data/models/CommuterRequest";
import { RouteLandmark } from "src/data/models/RouteLandmark";
import { Route } from "src/data/models/Route";
import { Position } from "src/data/models/position";
import { MessagingService } from "../fcm/fcm.service";
import { CloudStorageUploaderService } from "src/storage/storage.service";
import { CommuterPickup } from "src/data/models/CommuterPickup";
export declare class CommuterService {
    private configService;
    private messagingService;
    private storage;
    private commuterModel;
    private commuterPickUpModel;
    private commuterResponseModel;
    private commuterRequestModel;
    private routeLandmarkModel;
    private routeModel;
    constructor(configService: ConfigService, messagingService: MessagingService, storage: CloudStorageUploaderService, commuterModel: mongoose.Model<Commuter>, commuterPickUpModel: mongoose.Model<CommuterPickup>, commuterResponseModel: mongoose.Model<CommuterResponse>, commuterRequestModel: mongoose.Model<CommuterRequest>, routeLandmarkModel: mongoose.Model<RouteLandmark>, routeModel: mongoose.Model<Route>);
    toRadians(degree: number): Promise<number>;
    toDegrees(radian: number): Promise<number>;
    generateRouteCommuterRequests(routeId: string): Promise<void>;
    getAssociationCommuterRequests(associationId: string, startDate: string): Promise<CommuterRequest[]>;
    lambda$0(arg0: Route, arg1: [], arg2: Date, arg3: RouteLandmark): Promise<void>;
    getRouteCommuterRequests(routeId: string, startDate: string): Promise<CommuterRequest[]>;
    createCommuter(commuter: Commuter): Promise<Commuter>;
    createCommuterQRCode(commuter: Commuter): Promise<void>;
    addCommuter(commuter: Commuter): Promise<Commuter>;
    updateCommuter(commuter: Commuter): Promise<UpdateResult>;
    addCommuterRequest(commuterRequest: CommuterRequest): Promise<CommuterRequest>;
    addCommuterPickUp(commuterPickup: CommuterPickup): Promise<CommuterPickup>;
    getCommuterRequests(commuterId: string, startDate: string): Promise<CommuterRequest[]>;
    addCommuterResponse(commuterResponse: CommuterResponse): Promise<CommuterResponse>;
    generateCommuters(count: number): Promise<Commuter[]>;
    makeBusyLandmark(route: Route, commuters: Commuter[], minutesAgo: number, mark: RouteLandmark): Promise<void>;
    writeCommuterRequest(route: Route, minutesAgo: number, commuter: Commuter, mark: RouteLandmark, passengers: number): Promise<void>;
    getRandomPosition(pos: Position): Promise<Position>;
    getCoordinateWithOffset(coordinate: number, offsetInMeters: number): Promise<number>;
}
