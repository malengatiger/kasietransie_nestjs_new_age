import { Response } from "express";
import { Vehicle } from "src/data/models/Vehicle";
import { RouteAssignment } from "src/data/models/RouteAssignment";
import { RouteAssignmentList } from "src/data/helpers/RouteAssignmentList";
import { VehicleArrival } from "src/data/models/VehicleArrival";
import { MediaService } from "src/services/MediaService";
import { VehiclePhoto } from "src/data/models/VehiclePhoto";
import { DispatchService } from "src/features/dispatch/dispatch.service";
import { LocationRequestService } from "src/features/location_request/location_request.service";
import { RouteService } from "src/features/route/route.service";
import { TimeSeriesService } from "src/features/time_series/time_series.service";
import { VehicleService } from "src/features/vehicle/vehicle.service";
import { VehicleMediaRequest } from "src/data/models/VehicleMediaRequest";
import { VehicleBag } from "src/data/helpers/VehicleBag";
import { VehicleVideo } from "src/data/models/VehicleVideo";
import { TelemetryService } from "../heartbeat/heartbeat.service";
import { VehicleTelemetry } from "src/data/models/VehicleTelemetry";
import { UpdateResult } from "mongoose";
import { FuelTopUp } from "src/data/models/FuelTopUp";
import { FuelBrand } from "src/data/models/FuelBrand";
export declare class VehicleController {
    private readonly carService;
    private readonly dispatchService;
    private readonly mediaService;
    private readonly locationRequestService;
    private readonly routeService;
    private readonly timeSeriesService;
    private readonly telemetryService;
    private readonly logger;
    constructor(carService: VehicleService, dispatchService: DispatchService, mediaService: MediaService, locationRequestService: LocationRequestService, routeService: RouteService, timeSeriesService: TimeSeriesService, telemetryService: TelemetryService);
    addVehicle(vehicle: Vehicle): Promise<Vehicle>;
    updateVehicle(vehicle: Vehicle): Promise<UpdateResult>;
    addVehicleMediaRequest(request: VehicleMediaRequest): Promise<VehicleMediaRequest>;
    addVehiclePhoto(vehiclePhoto: VehiclePhoto): Promise<VehiclePhoto>;
    addFuelBrand(fuelBrand: FuelBrand): Promise<FuelBrand>;
    addFuelTopUp(fuelTopUp: FuelTopUp): Promise<FuelTopUp>;
    addVehicleArrival(vehicle: VehicleArrival): Promise<VehicleArrival>;
    addVehicleTelemetry(telemetry: VehicleTelemetry): Promise<VehicleTelemetry>;
    uploadQRFile(file: Express.Multer.File, associationId: string): Promise<any>;
    addRouteAssignments(assignments: RouteAssignmentList): Promise<RouteAssignment[]>;
    getPassengerTimeSeries(query: {
        associationId: string;
        routeId: string;
        vehicleId: string;
        startDate: string;
    }): Promise<any[]>;
    getVehicleData(vehicleId: string, startDate: string, endDate: string): Promise<any>;
    getVehicleFuelTopUps(vehicleId: string, startDate: string, endDate: string): Promise<any>;
    getAssociationFuelTopUps(associationId: string, startDate: string, endDate: string): Promise<any>;
    getFuelBrands(): Promise<FuelBrand[]>;
    getAssociationHeartbeatTimeSeries(query: {
        associationId: string;
        startDate: string;
    }, res: Response): Promise<void>;
    getAssociationVehicleMediaRequests(associationId: string, startDate: string): Promise<VehicleMediaRequest[]>;
    getOwnerVehicles(userId: string): Promise<Vehicle[]>;
    getVehiclePhotos(vehicleId: string): Promise<VehiclePhoto[]>;
    getVehicleVideos(vehicleId: string): Promise<VehicleVideo[]>;
    getVehicleRouteAssignments(vehicleId: string): Promise<RouteAssignment[]>;
    getVehicleBag(query: {
        vehicleId: string;
        startDate: string;
    }): Promise<VehicleBag>;
    private sendFile;
}
