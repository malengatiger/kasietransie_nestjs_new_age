import mongoose from "mongoose";
import { Association } from "src/data/models/Association";
import { SettingsModel } from "src/data/models/SettingsModel";
import { ExampleFile } from "src/data/models/ExampleFile";
import { RegistrationBag } from "src/data/models/RegistrationBag";
import { User } from "src/data/models/User";
import { AppError } from "src/data/models/AppError";
import { Vehicle } from "src/data/models/Vehicle";
import { FileArchiverService } from "src/my-utils/zipper";
import { Country } from "src/data/models/Country";
import { AssociationToken } from "src/data/models/AssociationToken";
import { MessagingService } from "../fcm/fcm.service";
import { CityService } from "../city/city.service";
import { UserService } from "../user/user.service";
import { Commuter } from "src/data/models/Commuter";
import { KasieErrorHandler } from "src/middleware/errors.interceptor";
import { VehiclePhoto } from "src/data/models/VehiclePhoto";
import { VehicleVideo } from "src/data/models/VehicleVideo";
import { CommuterRequest } from "src/data/models/CommuterRequest";
import { DispatchRecord } from "src/data/models/DispatchRecord";
import { VehicleArrival } from "src/data/models/VehicleArrival";
import { VehicleDeparture } from "src/data/models/VehicleDeparture";
import { Trip } from "src/data/models/Trip";
import { CommuterCashPayment } from "src/data/models/CommuterCashPayment";
import { CommuterCashCheckIn } from "src/data/models/CommuterCashCheckIn";
import { RankFeeCashCheckIn } from "src/data/models/RankFeeCashCheckIn";
import { RankFeeCashPayment } from "src/data/models/RankFeeCashPayment";
import { VehicleTelemetry } from "src/data/models/VehicleTelemetry";
import { AmbassadorPassengerCount } from "src/data/models/AmbassadorPassengerCount";
import { Route } from "src/data/models/Route";
export declare class AssociationService {
    private archiveService;
    private userService;
    private cityService;
    private messagingService;
    private readonly errorHandler;
    private associationModel;
    private vehicleModel;
    private settingsModel;
    private userModel;
    private countryModel;
    private associationTokenModel;
    private appErrorModel;
    private vehiclePhotoModel;
    private vehicleVideoModel;
    private exampleFileModel;
    private commuterModel;
    private dispatchRecordModel;
    private tripModel;
    private commuterCashPaymentModel;
    private commuterCashCheckInModel;
    private rankFeeCashCheckInModel;
    private rankFeeCashPaymentModel;
    private commuterRequestModel;
    private vehicleTelemetryModel;
    private ambassadorPassengerCountModel;
    private routeModel;
    private vehicleArrivalModel;
    constructor(archiveService: FileArchiverService, userService: UserService, cityService: CityService, messagingService: MessagingService, errorHandler: KasieErrorHandler, associationModel: mongoose.Model<Association>, vehicleModel: mongoose.Model<Vehicle>, settingsModel: mongoose.Model<SettingsModel>, userModel: mongoose.Model<User>, countryModel: mongoose.Model<Country>, associationTokenModel: mongoose.Model<AssociationToken>, appErrorModel: mongoose.Model<AppError>, vehiclePhotoModel: mongoose.Model<VehiclePhoto>, vehicleVideoModel: mongoose.Model<VehicleVideo>, exampleFileModel: mongoose.Model<ExampleFile>, commuterModel: mongoose.Model<Commuter>, dispatchRecordModel: mongoose.Model<DispatchRecord>, tripModel: mongoose.Model<Trip>, commuterCashPaymentModel: mongoose.Model<CommuterCashPayment>, commuterCashCheckInModel: mongoose.Model<CommuterCashCheckIn>, rankFeeCashCheckInModel: mongoose.Model<RankFeeCashCheckIn>, rankFeeCashPaymentModel: mongoose.Model<RankFeeCashPayment>, commuterRequestModel: mongoose.Model<CommuterRequest>, vehicleTelemetryModel: mongoose.Model<VehicleTelemetry>, ambassadorPassengerCountModel: mongoose.Model<AmbassadorPassengerCount>, routeModel: mongoose.Model<Route>, vehicleArrivalModel: mongoose.Model<VehicleArrival>);
    getAssociationVehicleDepartures(associationId: string, startDate: string, endDate: string): Promise<VehicleDeparture[]>;
    getAssociationDispatchRecords(associationId: string, startDate: string, endDate: string): Promise<DispatchRecord[]>;
    getAssociationVehicleArrivals(associationId: string, startDate: string, endDate: string): Promise<VehicleArrival[]>;
    getAssociationVehicleTelemetry(associationId: string, startDate: string, endDate: string): Promise<VehicleTelemetry[]>;
    getAssociationCommuterRequests(associationId: string, startDate: string, endDate: string): Promise<CommuterRequest[]>;
    getAssociationCommuterCashPayments(associationId: string, startDate: string, endDate: string): Promise<CommuterCashPayment[]>;
    getAssociationCommuterCashCheckIns(associationId: string, startDate: string, endDate: string): Promise<CommuterCashCheckIn[]>;
    getAssociationRankFeeCashPayments(associationId: string, startDate: string, endDate: string): Promise<RankFeeCashPayment[]>;
    getAssociationRankFeeCashCheckIns(associationId: string, startDate: string, endDate: string): Promise<RankFeeCashCheckIn[]>;
    getAssociationTrips(associationId: string, startDate: string, endDate: string): Promise<Trip[]>;
    getAssociationPassengerCounts(associationId: string, startDate: string, endDate: string): Promise<AmbassadorPassengerCount[]>;
    getAssociationRoutes(associationId: string): Promise<Route[]>;
    getAssociationById(associationId: string): Promise<any>;
    resetAssociationData(associationId: string): Promise<any>;
    getAssociations(): Promise<any[]>;
    getAssociationUsers(associationId: string): Promise<any[]>;
    getAssociationVehicles(associationId: string): Promise<Vehicle[]>;
    getAssociationVehiclesZippedFile(associationId: string): Promise<string>;
    getOwnerVehiclesZippedFile(userId: string): Promise<string>;
    getAssociationSettingsModels(associationId: string): Promise<any[]>;
    getAllSettingsModels(): Promise<any[]>;
    downloadExampleVehiclesFile(): Promise<File>;
    downloadExampleUserCSVFile(): Promise<string>;
    downloadExampleUserJSONFile(): Promise<string>;
    downloadExampleVehicleCSVFile(): Promise<string>;
    downloadExampleVehicleJSONFile(): Promise<string>;
    downloadFileFromStorage(fileName: string): Promise<string>;
    private generateUniqueId;
    registerAssociation(association: Association): Promise<RegistrationBag>;
    addSettingsModel(model: SettingsModel): Promise<any>;
    addAssociationToken(associationId: string, userId: string, token: string): Promise<any>;
    getAssociationAppErrors(associationId: string, startDate: string, endDate: string): Promise<AppError[]>;
    getRandomCommuters(limit: number): Promise<any[]>;
    getAppErrors(startDate: string): Promise<any[]>;
    getExampleFiles(): Promise<any[]>;
    upLoadExampleFiles(): Promise<ExampleFile[]>;
    getFakeEmail(): string;
    randomIntFromInterval(min: number, max: number): number;
    getFakeCellphoneNumber(): string;
}
