import { ConfigService } from '@nestjs/config';
import mongoose from 'mongoose';
import { AmbassadorPassengerCount } from 'src/data/models/AmbassadorPassengerCount';
import { AmbassadorCheckIn } from 'src/data/models/AmbassadorCheckIn';
import { RouteLandmark } from 'src/data/models/RouteLandmark';
import { User } from 'src/data/models/User';
import { Vehicle } from 'src/data/models/Vehicle';
import { MessagingService } from 'src/messaging/messaging.service';
import { TimeSeriesService } from './TimeSeriesService';
import { NewMongoService } from 'src/data/db_ping';
export declare class AmbassadorService {
    private readonly messagingService;
    private readonly timeSeriesService;
    private readonly mongoService;
    private readonly configService;
    private vehicleModel;
    private ambassadorPassengerCountModel;
    private ambassadorCheckInModel;
    private routeLandmarkModel;
    constructor(messagingService: MessagingService, timeSeriesService: TimeSeriesService, mongoService: NewMongoService, configService: ConfigService, vehicleModel: mongoose.Model<Vehicle>, ambassadorPassengerCountModel: mongoose.Model<AmbassadorPassengerCount>, ambassadorCheckInModel: mongoose.Model<AmbassadorCheckIn>, routeLandmarkModel: mongoose.Model<RouteLandmark>);
    getAssociationAmbassadorCheckIn(associationId: string, startDate: string): Promise<any[]>;
    getVehicleAmbassadorCheckIn(vehicleId: string, startDate: string): Promise<AmbassadorCheckIn[]>;
    getUserAmbassadorPassengerCounts(userId: string, startDate: string): Promise<any[]>;
    getAssociationAmbassadorPassengerCounts(associationId: string, startDate: string): Promise<AmbassadorPassengerCount[]>;
    getVehicleAmbassadorPassengerCounts(vehicleId: string, startDate: string): Promise<AmbassadorPassengerCount[]>;
    addAmbassadorPassengerCount(count: AmbassadorPassengerCount): Promise<AmbassadorPassengerCount>;
    generateRoutePassengerCounts(routeId: string, numberOfCars: number, intervalInSeconds: number): Promise<AmbassadorPassengerCount[]>;
    getAmbassadorPassengerCount(users: User[], passengerCounts: AmbassadorPassengerCount[], vehicle: Vehicle, marks: RouteLandmark[], minutesAgo: Date, landmarkIndex: number, previousAPC: AmbassadorPassengerCount, mark: RouteLandmark): Promise<AmbassadorPassengerCount>;
    generateAmbassadorPassengerCounts(associationId: string, numberOfCars: number, intervalInSeconds: number): Promise<AmbassadorPassengerCount[]>;
    getCars(list: Vehicle[], numberOfCars: number): Promise<Vehicle[]>;
    getUserAmbassadorCheckIn(userId: string, startDate: string): Promise<AmbassadorCheckIn[]>;
    addAmbassadorCheckIn(count: AmbassadorPassengerCount, startDate: string): Promise<AmbassadorPassengerCount>;
    getRoutePassengerCounts(routeId: string, startDate: string): Promise<AmbassadorPassengerCount[]>;
    getCurrentPassengers(passengersIn: number, passengersOut: number, currentPassengers: number): Promise<number>;
}
