import { ConfigService } from '@nestjs/config';
import mongoose from 'mongoose';
import { Vehicle } from 'src/data/models/Vehicle';
import { Association } from 'src/data/models/Association';
import { User } from 'src/data/models/User';
import { Route } from 'src/data/models/Route';
import { RouteAssignmentList } from 'src/data/helpers/RouteAssignmentList';
import { RouteAssignment } from 'src/data/models/RouteAssignment';
import { RoutePoint } from 'src/data/models/RoutePoint';
import { VehicleHeartbeat } from 'src/data/models/VehicleHeartbeat';
import { VehicleBag } from '../data/helpers/VehicleBag';
import { DispatchRecord } from '../data/models/DispatchRecord';
import { VehicleArrival } from '../data/models/VehicleArrival';
import { AmbassadorPassengerCount } from '../data/models/AmbassadorPassengerCount';
import { VehicleDeparture } from '../data/models/VehicleDeparture';
import { AssociationService } from './association_service.service';
export declare class VehicleService {
    private configService;
    private associationService;
    private vehicleModel;
    private dispatchRecordModel;
    private vehicleArrivalModel;
    private vehicleHeartbeatModel;
    private ambassadorPassengerCountModel;
    private vehicleDepartureModel;
    private associationModel;
    private userModel;
    private assignModel;
    private routeModel;
    constructor(configService: ConfigService, associationService: AssociationService, vehicleModel: mongoose.Model<Vehicle>, dispatchRecordModel: mongoose.Model<DispatchRecord>, vehicleArrivalModel: mongoose.Model<VehicleArrival>, vehicleHeartbeatModel: mongoose.Model<VehicleHeartbeat>, ambassadorPassengerCountModel: mongoose.Model<AmbassadorPassengerCount>, vehicleDepartureModel: mongoose.Model<VehicleDeparture>, associationModel: mongoose.Model<Association>, userModel: mongoose.Model<User>, assignModel: mongoose.Model<RouteAssignment>, routeModel: mongoose.Model<Route>);
    findOwnerVehiclesByLocationAndTime(userId: string, latitude: number, longitude: number, minutes: number): Promise<VehicleHeartbeat[]>;
    findAssociationVehiclesByLocationAndTime(associationId: string, latitude: number, longitude: number, minutes: number): Promise<VehicleHeartbeat[]>;
    generateFakeVehiclesFromFile(associationId: string): Promise<Vehicle[]>;
    getPoints(route: Route): Promise<RoutePoint[]>;
    buildUser(cellphone: string, lastName: string, firstName: string, ass: Association, responses: []): Promise<User>;
    insertCar(resultVehicles: Vehicle[], responses: [], existingUser: User, vehicle: Vehicle, result: number): Promise<void>;
    addVehicle(vehicle: Vehicle): Promise<Vehicle>;
    getVehicleBag(vehicleId: string, startDate: string): Promise<VehicleBag>;
    addRouteAssignments(list: RouteAssignmentList): Promise<RouteAssignment[]>;
    getVehicleRouteAssignments(vehicleId: string): Promise<RouteAssignment[]>;
    getRouteAssignments(routeId: string): Promise<RouteAssignment[]>;
    generateHeartbeats(associationId: string, numberOfCars: number, intervalInSeconds: number): Promise<VehicleHeartbeat[]>;
    generateRouteHeartbeats(routeId: string, numberOfCars: number, intervalInSeconds: number): Promise<VehicleHeartbeat[]>;
    updateVehicle(vehicle: Vehicle): Promise<Vehicle>;
    getOwnerVehicles(userId: string, page: number): Promise<Vehicle[]>;
    updateVehicleQRCode(vehicle: Vehicle): Promise<number>;
    importVehiclesFromJSON(file: Express.Multer.File, associationId: string): Promise<Vehicle[]>;
    private processCars;
    importVehiclesFromCSV(file: Express.Multer.File, associationId: string): Promise<Vehicle[]>;
    private buildCar;
}
