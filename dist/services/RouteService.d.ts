import mongoose from 'mongoose';
import { RouteUpdateRequest } from 'src/data/models/RouteUpdateRequest';
import { VehicleMediaRequest } from 'src/data/models/VehicleMediaRequest';
import { RouteLandmark } from 'src/data/models/RouteLandmark';
import { RouteCity } from 'src/data/models/RouteCity';
import { Route } from 'src/data/models/Route';
import { CalculatedDistance } from 'src/data/models/CalculatedDistance';
import { RoutePoint } from 'src/data/models/RoutePoint';
import { FileArchiverService } from 'src/my-utils/zipper';
import { MessagingService } from 'src/messaging/messaging.service';
import { RoutePointList } from 'src/data/models/RoutePointList';
import { City } from 'src/data/models/City';
import { CityService } from './CityService';
export declare class RouteService {
    private readonly archiveService;
    private readonly messagingService;
    private readonly cityService;
    private routeUpdateRequestModel;
    private vehicleMediaRequestModel;
    private routeLandmarkModel;
    private routeCityModel;
    private cityModel;
    private routePointModel;
    private calculatedDistanceModel;
    private routeModel;
    constructor(archiveService: FileArchiverService, messagingService: MessagingService, cityService: CityService, routeUpdateRequestModel: mongoose.Model<RouteUpdateRequest>, vehicleMediaRequestModel: mongoose.Model<VehicleMediaRequest>, routeLandmarkModel: mongoose.Model<RouteLandmark>, routeCityModel: mongoose.Model<RouteCity>, cityModel: mongoose.Model<City>, routePointModel: mongoose.Model<RoutePoint>, calculatedDistanceModel: mongoose.Model<CalculatedDistance>, routeModel: mongoose.Model<Route>);
    findAssociationRouteLandmarksByLocation(associationId: string, latitude: number, longitude: number, radiusInKM: number): Promise<RouteLandmark[]>;
    findRouteLandmarksByLocation(latitude: number, longitude: number, radiusInKM: number): Promise<RouteLandmark[]>;
    findAssociationRoutesByLocation(associationId: string, latitude: number, longitude: number, radiusInKM: number): Promise<Route[]>;
    getAssociationRouteLandmarks(associationId: string): Promise<RouteLandmark[]>;
    addRoute(route: Route): Promise<Route>;
    createRouteQRCode(route: Route): Promise<Route>;
    getCalculatedDistances(routeId: string): Promise<CalculatedDistance[]>;
    getRouteUpdateRequests(routeId: string): Promise<RouteUpdateRequest[]>;
    refreshRoute(routeId: string): Promise<string>;
    updateRouteColor(routeId: string, color: string): Promise<Route>;
    addRoutePoints(list: RoutePointList): Promise<number>;
    deleteRoutePointsFromIndex(routeId: string, index: number): Promise<RoutePoint[]>;
    addCalculatedDistances(list: CalculatedDistance[]): Promise<CalculatedDistance[]>;
    addRouteLandmark(routeLandmark: RouteLandmark): Promise<RouteLandmark[]>;
    deleteRouteLandmark(routeLandmarkId: string): Promise<RouteLandmark[]>;
    addVehicleMediaRequest(vehicleMediaRequest: VehicleMediaRequest): Promise<VehicleMediaRequest>;
    addRouteUpdateRequest(routeUpdateRequest: RouteUpdateRequest): Promise<RouteUpdateRequest>;
    updateRouteLandmark(routeLandmark: RouteLandmark): Promise<RouteLandmark>;
    addRouteCity(routeCity: RouteCity): Promise<RouteCity>;
    addRouteCities(routeCities: RouteCity[]): Promise<RouteCity[]>;
    getRouteCities(routeId: string): Promise<RouteCity[]>;
    getRouteLandmarks(routeId: string): Promise<RouteLandmark[]>;
    findRoutesByLocation(latitude: number, longitude: number, radiusInKM: number): Promise<Route[]>;
    findRoutePointsByLocation(latitude: number, longitude: number, radiusInKM: number): Promise<RoutePoint[]>;
    getAssociationRoutePoints(associationId: string): Promise<string>;
    getAssociationRouteZippedFile(associationId: string): Promise<string>;
    getAssociationRouteCities(associationId: string): Promise<RouteCity[]>;
    putRouteLandmarksInOrder(routeId: string): Promise<RouteLandmark[]>;
    getAssociationRoutes(associationId: string): Promise<Route[]>;
    getRoutePoints(routeId: string): Promise<RoutePoint[]>;
    getRoutePointsZipped(routeId: string): Promise<string>;
    getRoute(routeId: string): Promise<Route>;
    deleteRoutePoints(routeId: string, latitude: number, longitude: number): Promise<string>;
    removeAllDuplicateRoutePoints(): Promise<any>;
    removeDuplicateRoutePoints(routeId: string): Promise<any>;
}
